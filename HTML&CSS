# HTML&CSS

## HTML5语义化

优点：

1. html结构清晰
2. 代码可读性好
3. 搜索引擎可根据标签的语言确定上下文和权重问题
4. 移动设备更好的展示页面
5. 便于团队维护开发

## BFC 块级格式化上下文

1. 触发条件
   - 根html元素
   - position不为relative或static
   - display为table-cell table-caption inline-block
   - overflow不为visible
   - float不为none

2. 作用
   - 不和浮动元素重叠
   - 清除元素内部浮动
   - 解决上下相邻两个元素重叠

## 清除浮动的方法

高度塌陷：

块级元素若不设置高度，则由子元素撑开，若子元素设置了浮动，脱离了文档流，则造成高度塌陷，需要清除浮动

方法：

1. 父元素设置高度，手动撑开
2. 父元素添加overflow:hidden，（BFC）
3. 浮动元素后添加空标签，设置clear:both
4. 父元素添加伪类:after和zoom
5. 父元素一起浮动
6. 父元素添加display:table（BFC）

## 伪类和伪元素

根本区别：**是否抽象创造了新的元素**

伪元素：不存在于DOM文档中，是创建的虚拟的元素，代表某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中。

伪类：存在DOM文档中，逻辑上存在但在文档树中却无须标识的“幽灵”分类。

如：状态伪类——:link :hover :active等

## 块级元素 行内元素

常见的块级元素：

```html
<center></center>
<h1></h1>-<h6></h6>
<div></div>
<hr>  水平分割线
<p>...</p>  段落
<pre>...</pre>  预格式化
<blockquote>...</blockquote>  段落缩进   前后5个字符
<marquee>...</marquee>  滚动文本
<ul>...</ul>  无序列表
<ol>...</ol>  有序列表
<dl>...</dl>  定义列表
<table>...</table>  表格
<form>...</form>  表单
```

常见的行内标签

特点：**设置的宽高无效。margin的上下无效，左右方向有效，padding上下左右都有效，但是会撑大自己的空间。**

```
<b>...</b>  加粗
<strong>...</strong>  加粗
<sup>...</sup>  上标
<sub>...</sub>  下标
<i>...</i>  斜体
<em>...</em>  斜体
<del>...</del>  删除线
<u>...</u>  下划线
```

常见的行内块级元素：

```
<span>...</span>
<a>...</a>
<img/>
<textarea>...</textarea>
<button>..</button>
<input>
<br>
<label>...</label>
<select>...</select>
<canvas>...</canvas>
<progress>...</progress>
<cite>...</cite>
<code>...</code>
<strong>...</strong>
<em>...</em>
<audio>...</audio>
<video>...</video>
```

## 选择器及优先级

!important > 内联样式 > ID选择器 > 类选择器、属性选择器、伪类选择器 > 元素选择器、关系选择器、伪元素选择器 > 通配符选择器

## 水平居中

1. 父元素text-align:center+子元素display:inline-block
2. 子元素：display:table + margin(但若子元素脱离文档流，则margin失效)
3. position:absolute + transform (需要父元素开启定位)
4. flex布局:justify-content

## 垂直居中

1. 父元素 display:table-cell + vertical-align:center
2. absolute + transform
3. flex布局：align-items

## 水平垂直居中

定宽高：

1. 绝对定位+transform
2. flex布局：justify-content,align-items
3. grid布局
4. 父元素table-cell text-align vertical-align 和子元素inline-block（或margin：auto）

不定宽高：

1. 绝对定位+transform
2. 父元素table-cell text-align vertical-align 和子元素inline-block（或margin：auto）
3. flex布局
4. grid+margin:auto

## flex布局

flex: *flex-grow* *flex-shrink* *flex-basis*|auto|initial|inherit;

若所有项目的

flex-grow:1 表示等分剩余空间

flex-shrink:1 表示空间不足时，缩小比例相同

flex-basis: auto 定义在分配多余空间之前，项目占据的主轴空间（main size）

## CSS动画与GPU（涉及浏览器渲染）

### 浏览器渲染

1. 解析html，xhtml，svg，形成dom树；解析css，形成cssom树；
2. 将DOM树和CSSOM树结合生成渲染树（根据每个可见节点及其对应的样式规则组合生成，而不可见的节点有：a.不会渲染输出的节点，包括link,script; b.通过css隐藏的节点：display:none的节点）==visibility和opacity隐藏的节点，还是会显示在渲染树上==
3. layout 布局 根据生成的渲染树，计算它们在设备视口(viewport)内的确切位置和大小。
4. Painting 绘制 通过构造Render Tree和layout，我们已经得知哪些是可见节点，以及可见节点的样式和具体的几何信息(位置、大小)，将渲染树的每个节点都转换为屏幕上的实际像素。
5. display 将像素发送给GPU，展示在页面上

### CSS3动画的优点

1. 不占用js主线程
2. 可以利用硬件加速
3. 浏览器可对动画做优化

### 可以触发GPU硬件加速

`transform`  `opacity`  `filter`

### 动画性能优化

- 只允许改变`transform`、`opacity`，其它属性不要动，避免重新计算布局（reflow）
- 对动画元素应用`transform: translate3d(0, 0, 0)`、`will-change: transform`等，开启硬件加速
- 动画元素尽量用`fixed`、`absolute`定位方式，避免reflow
- 对动画元素应用高一点的`z-index`，减少复合层数量

## visibility,opacity,display

结构：

`dispaly:none`：不会出现在渲染树中，渲染时不占据空间，不可点击

`opacity:0`：在渲染树中，占据空间，内容不可见，可点击

`visibility:hidden`：在渲染树中，占据空间，内容不可见，不可点击

继承：

`display:none;opacity:0`：修改子孙节点也无法显示

`visibility:hidden`：修改子孙节点为visible，可以显示

性能：

`display:none`：修改元素会造成回流

`visibility:hidden;opacity:0`：修改元素不会回流，会重绘

## animation和transition性能比较

浏览器有一个主线程和排版线程；主线程一般是对 js 运行的、页面布局、生成位图等等，然后把生成好的位图传递给排版线程，而排版线程会通过 GPU 将位图绘制到页面上，也会向主线程请求位图等等；

我们在用使用 aniamtion 的时候这样就可以改变很多属性，像我们改变了 width、height、postion 等等这些改变文档流的属性的时候就会引起，页面的回流和重绘，对性能影响就比较大，

但是我们用 transition 的时候一般会结合 tansfrom 来进行旋转和缩放等不会生成新的位图，当然也就不会引起页面的重排了

## 回流和重绘

可以引起回流的情况：

1. 页面首次渲染
2. 浏览器窗口发生改变
3. 元素尺寸位置发生改变
4. 元素内容发生变化
5. 元素字体大小发生变化
6. 添加或删除可见的dom元素
7. 激活css伪类
8. 查询某些属性或调用某些方法

重绘：页面中元素样式的改变并不影响它在文档流中的位置时，会发生重绘

## childNodes children firstChild firstElementChild

childNodes:返回元素==子节点==集合，包括元素节点和文本节点

children：返回指定元素的==子元素集合==，只包括元素节点，不包括文本节点

firstChild：获取指定元素的第一个子节点，可以是元素节点，也可以是文本节点。**若父元素与第一个子元素之间存在空白节点，firstChild获取到的将是空白节点而不是第一个子元素。**

firstElementChild:获取指定元素的第一个子元素节点，不会检测到文本节点。

## 事件机制&事件代理

三个阶段：

1. 捕获阶段 （从window到document一直到目标元素）
2. 目标阶段
3. 冒泡阶段

事件代理：

由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理

阻止默认事件：`event.preventDefault()`

阻止冒泡事件：`event.stopPropogation()`


